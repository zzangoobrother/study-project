package com.example.testcodewitharchitecture.mock;

import com.example.testcodewitharchitecture.user.domain.User;
import com.example.testcodewitharchitecture.user.domain.UserStatus;
import com.example.testcodewitharchitecture.user.service.port.UserRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<User> users = new ArrayList<>();

    @Override
    public Optional<User> findById(long id) {
        return users.stream()
                .filter(user -> Objects.equals(user.getId(), id))
                .findAny();
    }

    @Override
    public Optional<User> findByIdAndStatus(long id, UserStatus status) {
        return users.stream()
                .filter(user -> Objects.equals(user.getId(), id) && user.getStatus() == status)
                .findAny();
    }

    @Override
    public Optional<User> findByEmailAndStatus(String email, UserStatus status) {
        return users.stream()
                .filter(user -> Objects.equals(user.getEmail(), email) && user.getStatus() == status)
                .findAny();
    }

    @Override
    public User save(User user) {
        if (user.getId() == null || user.getId() == 0) {
            User newUser = User.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(user.getEmail())
                    .nickname(user.getNickname())
                    .address(user.getAddress())
                    .certificationCode(user.getCertificationCode())
                    .status(user.getStatus())
                    .lastLoginAt(user.getLastLoginAt())
                    .build();

            users.add(newUser);
            return newUser;
        }

        users.removeIf(item -> Objects.equals(item.getId(), user.getId()));
        users.add(user);
        return user;
    }
}
